def n_to_m(strok,n,m):                 # strok = "a b c d f ..."  , если число в 10 сис исч, то можно пробелы не ставить
    masiv = [int(i) for i in strok.split()] # masiv = [a, b, c, d, f ...]
    masiv.reverse()                         # masiv = [..., f, d, c, b, a]
    x = 0
    for i in range(len(masiv)):
            x += masiv[i]*n**i         # x - это stroka в 10 системе
    a = x
    b=[]
    while a >= m:                       # теперь из 10 в m систему
        b.append(a%m)
        a = a//m
    b.append(a)
    b.reverse()
    strok2 = ""
    if m<=10:    # для удобства
        y = ""  # если m = 2 просто чтобы пробелов не было
    else:
        y = " "
    for i in b:
        strok2 += str(i)+y
    return strok2
    


        
#y = "49169216951550590713853725801546057325127628438829554876300604592143040290476194300279198164148172666902982820151963114401479253274500450219894157583514151212781269029376640226759491916254157278399631333318040835828705231978161785819609964245261352329641071577964450989580512401984187838823105564438652775867462901865536950659648055299352865135222449891564586419841017140081280056917180815025666740924591403971234180411291825092878549336338349567341012959333208472599720960278755895553773890484136440293395911148235894202481675823850436799350921184854308670928550418948659422987479159669029001255480618200429668089606358032715498184248542563441368410355972263263219879395318103543141395370670745660364371534700119950168114619695516366677153425934765134972203855179627396194240476683121299598710260765191444423784360297019961256292210114060545951499218152760510684591226102664565424289556168881301999648443609283002331267424468175180532439429989466568227712707019069985601413285639083398791664330219267023697655324943627055811562558472774452074635989140149846973615392964039915785508118246327897696289509132929739511986986378580827872975672391425832304137949940054030498497429435714996701965094256660753481307633752697181770248417185548228942431865920273092960184191980047529703799179400257013774588314015293011108646459495972287438983571573437977737116881638131309397738865570077234418984690839519584643058834867409295843010662429410682522255213838282136212931027735351508718181785298044738911056338924157217162792149729655993090173221195546842552710666173743355367136286524097615447613520770574053250294475661459192192519769917455929025749955089629860080393816714793981733355408867966881423024940655484203098364871231964404577858475863940146371508045606063878690582406868647327730038063491900657187505403621548519157944674544635841840911553718582221354767023947785514414496588973820144408238321828232809503724124811630581547205417532870857115924215162207274985014029140654585351378364538680296979052876700446810914186567128411891092440699514056917401431218235781496119644310790862387456413433324675238485053915392689165427438052349291713001185387220335420909573219690361081805398976228823755629388697822551987266353941437529905508215835118987137590449963203543231561429834106633733227924940904550613938323689704285825390926780951532930755046663799989729604959736663704129323447640358545585130404840621175603039698154786634089002858827201333296718783807050172125362568331088683959459402032854317556638349357754792497684343245370437004892607928438974709568946693963419645283841482376132291559705416689962165952769806345822292961862791565125980949197327309634396082481252868494770497570127164751539031606085481719090258363903193816363238984264611078687643894509257944369510022867321907300857935495650882766769499302870401349256800888441978446565796214908406864875127550827762430188359856853269972575926505796760831523072138144478365625044175266935387787671487518428917844348607097608039238477723635509278646717454130989029815557224369840546602694402049286170195345227422260059015594707638279091983830494064464446799906735926294007257339867460108665275476666037215564968262779533019832754730872821994296942287555413254057174599039046857652229461139089079165251311732294470740769872413107270612994406530977650760172976532367810075564004743376423120471028276347861450115414207002794793722375201549040431779229844058016338937110234389648081436058646697655499675199931890009133954317156995593675825838065259501266511836429350089845735886371046621808776595727182948191471749552162908882793572773975226587972605209284882471975124644498220409359373063524338096874155755477551713941666270123667382130473703435625171481329569247495487482125540994628839426040466689932820521465512710020591974853421726597793155130757333057011483492159386145061254923750103993626694703881087538118267158277705284197597042820425660808975179085550428328842837747206758244306901903126683175830906496229754130528614098136595007170048073889914522785417887706706835343624615263680652036907967962364118419277520292489687842912625994150590328906808262654607042635134345506022728994949221892389576990620155521852862013293654817473728696794381332929130806755866143378584129048186298209578853936614376086000870266453128337719122554385198740645014321747824125805562650504468877563305557024537978762277059437752483642758815525614485528784651631536823816847216501964684521307466964481282837187340155549560086656804610277562971737145518569819251325838870131298211177897972694613325976665692158313595263728578323501698778998262525261623281286576423689373116939136720276651637098511336436976210490791935959434596409512355392194276158755218082795636378807032902546064937418165801886699714057327331171570908090214089964726104195255104096322852641471570090106340044484656078301319628783310854116187462841288805172235763579410750862158892231656323688876323424313016362227661931672927058950312163730529089941102024742069260660762143485584139499499474223517566269556298081383319258714191153705169036030729745111139099146991012239592548845941600264184262745158832636258729651261971448137487639666927727549156554723332818261673227420903403518322028309847252205147404175697614462259753608518713244981739099678358293271384822072219612589076812620228217012589035491936114102508507844890330018561286351541639305651187896728513665"
        
    

#print(n_to_m(y,10,10**500))

#print(n_to_m("1 0 1 0 1",2,10))


def main():
    print(n_to_m("123 12 3 1 123 12 ", 124, 10))

    print(n_to_m("3608741633776", 10 , 124))

    print(n_to_m("1000000",10,1001))

if __name__ == "__main__":
    main()
    


